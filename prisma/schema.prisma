// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  avatar_url   String?
  password     String
  full_name    String
  phone        String
  country_code String
  logged       String  @default("y")
}

enum Role {
  USER
  DISTRIBUTOR
}

model User {
  id           Int     @id @default(autoincrement())
  // data in
  avatar_url   String?
  email        String  @unique
  password     String
  ref_id       Int?
  full_name    String
  dni          String  @unique
  phone        String
  country_code String

  balance_in_cents Int    @default(0)
  enabled          String @default("y")
  role             Role   @default(USER)

  vouchers   Voucher[]
  orders     Order[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Account    Account[]
}

model Bank {
  id       Int     @id @default(autoincrement())
  bank_url String?
  bank     String
  number   String
  name     String
  type     String
}

enum VoucherStatus {
  READ
  UNREAD
}

model Voucher {
  id          Int           @id @default(autoincrement())
  voucher_url String?
  number      String
  value       Int
  user        User          @relation(fields: [user_id], references: [id])
  user_id     Int
  date        DateTime
  status      VoucherStatus @default(UNREAD)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum ProductState {
  IMMEDIATE_DELIVERY // entrega inmediata
  UPON_REQUEST // a pedido
}

enum AccountStatus {
  BOUGHT // comprado
  NOT_BOUGHT // no comprado
}

model Account {
  id              Int           @id @default(autoincrement())
  is_active       Boolean       @default(false)
  // data in
  email           String
  password        String
  description     String?
  pin             String
  status          AccountStatus @default(NOT_BOUGHT)
  number_profiles Int?

  purchase_date DateTime? // fecha compra
  renewal_date  DateTime? // fecha renovacion

  platform    Platform @relation(fields: [platform_id], references: [id])
  platform_id Int
  user        User?    @relation(fields: [user_id], references: [id])
  user_id     Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum PlatformState {
  IMMEDIATE_DELIVERY // entrega inmediata
  UPON_REQUEST // a pedido
}

model Platform {
  id                         Int           @id @default(autoincrement())
  img_url                    String?
  name                       String
  description                String
  days_duration              Int
  price_in_cents             Int
  price_distributor_in_cents Int
  status                     PlatformState @default(IMMEDIATE_DELIVERY)
  Order                      Order[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Account    Account[]
}

enum StatusOrder {
  PENDING
  ATTENDED
}

model Order {
  id          Int         @id @default(autoincrement())
  //data in
  ref_id      Int?
  role        Role
  platform    Platform    @relation(fields: [platform_id], references: [id])
  platform_id Int
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  status      StatusOrder @default(ATTENDED)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Notification {
  id           Int      @id @default(autoincrement())
  phone_client String
  message      String
  created_at   DateTime @default(now())
}
