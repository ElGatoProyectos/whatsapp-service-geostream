// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int    @id @default(autoincrement())
  full_name String
  phone     String
  email     String
  password  String
  logged    String @default("y")
}

model AccountToDeposit {
  id     Int    @id @default(autoincrement())
  bank   String
  number String
  name   String
  type   String
}

model DepositToAdmin {
  id             Int      @id @default(autoincrement())
  voucher_number String
  value          Int
  date           DateTime
  user           User     @relation(fields: [user_id], references: [id])
  user_id        Int
}

enum Role {
  USER
  DISTRIBUTOR
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  ref_id           Int?             @unique
  role             Role             @default(USER)
  full_name        String
  dni              String?
  phone            String
  balance_in_cents Int              @default(0)
  password         String
  enabled          String           @default("y")
  accounts         Account[]
  deposits         DepositToAdmin[]
  orders           Order[]
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
}

model Product {
  id                         Int       @id @default(autoincrement())
  platform_id                Int
  platform                   Platform  @relation(fields: [platform_id], references: [id])
  accounts                   Account[]
  price_in_cents             Int
  price_distributor_in_cents Int
  created_at                 DateTime  @default(now())
  updated_at                 DateTime  @updatedAt
}

enum States {
  AVAILABLE // disponible
  DELIVERED // entregado
  PENDING // pendiente
}

model Account {
  id                 Int      @id @default(autoincrement())
  is_active          Boolean
  email              String
  password           String
  pin                String
  numb_profiles      Int
  numb_days_duration Int
  status             States   @default(AVAILABLE)
  platform           Platform @relation(fields: [platform_id], references: [id])
  platform_id        Int
  product            Product  @relation(fields: [product_id], references: [id])
  product_id         Int
  user               User?    @relation(fields: [user_id], references: [id])
  user_id            Int?
  orders             Order[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Platform {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  products    Product[] @relation()
  account     Account[]
}

model Order {
  id       Int  @id @default(autoincrement())
  ref_id   Int?
  role     Role
  quantity Int

  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account_id Int
  account    Account  @relation(fields: [account_id], references: [id], onDelete: Restrict)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Notifications {
  id           Int      @id @default(autoincrement())
  phone_client String
  message      String
  created_at   DateTime @default(now())
}
